
apply plugin: 'java'
apply plugin: 'eclipse'

// Jar-File version
version = '1.0-DEV'

// Quell: https://docs.gradle.org/current/userguide/java_plugin.html
//archivesBaseName =   

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}


/* Additional JARs */
repositories {
    mavenCentral()
}



dependencies {
	// # gradle -q init --type groovy-library
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.testng:testng:' + '6.+'

    //compile project(':rbbSeleniumTestNgEclipseTestcases')


	/* local project jars in own libs folder */
	//compoile fileTree(dir: 'libs', include: '*.jar')
	
	/* Reference from filesystem */
	//compile fileTree(dir: "${System.properties['user.home']}/libs/cargo", include: '*.jar')
}



/* --- Test env --- */
// TestSuite = running a set of testcases
def rbbTest = project.hasProperty("Test-Suite")

/* Global testconfiguration */
test {
    /* Set system property for JVM(s) */
    systemProperties 'property': 'value'
	systemProperties 'tests.browser': 'firefox'
	
   	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"
	  
    /* enable testng support (default is junit) */
	useTestNG() {
		// loading .xml test configuration into suiteXMLfiles
		//suiteXmlFiles << new File("src/test/resources/testng.yaml")
		//setSuiteXmlFiles(suiteXmlFiles)  
		
		if(rbbTest) {
			suites "src/test/resources/testng.yaml"
		}
	
	}
}
/*
gradlew test -PsuiteX
gradlew test -Psuite1 -Psuite2
*/
/* --- --- --- */



/* --- Project description --- */
description="""
Description section
Project name: ${project.name}
"""
/* --- --- --- */



/* --- Tasks --- */

// bash: #printenv
def bashHomePath = "$System.env.HOME"
// AL: def bashHomePath = System.properties['user.home']


task wrapper(type: Wrapper) {
	group 'MGE'
	description '# Download gradlew wrapper, if necessary'
	gradleVersion = '4.2.1'
}


task listJars {
	group 'MGE'
	description '# Verify all jar dependencies'
	configurations.compile.each {
		File file -> println file.name
	}
}


task sync_build_to_bin(type: Sync, dependsOn: build) {
 	group 'MGE' 
	description '#'
    from 'build/classes/java/test'
    	include "**/*.class"
    into 'bin'
}


defaultTasks 'cleanClass', 'compileA'

task cleanClass(type: Delete) {
 	group 'MGE' 
	description '#'
	doFirst {
		delete './bin/org/gradle/rbbTest.class'
	}
    doLast {
        println 'Executing the cleanClass task'
    }
}

task compileA {
 	group 'MGE' 
	description '#'
    doLast {
        println 'Executing the compile task'
    }
}


task runA(dependsOn: [compileA]) {
 	group 'MGE' 
	description '#'
    doLast {
        println 'Executing the compile task'
    }
}
// AL: run.dependsOn compile, ...


task printSomething {
	// List taks by # gradle -q tasks --all under group-name
 	group 'MGE' 
	description '#'
	doFirst {
		println "The project name :: ${project.name} ${bashHomePath}"
	}
	doLast {
		println "CREATOR"
	}
}


/* Task in dependecy of ...
task eclipse {
 	group 'MGE' 
	description '#'
    doLast {
        println 'Hello Eclipse'
    }
}

// #1st approach - closure returning true, if the task should be executed, false if not.
eclipse.onlyIf {
    project.hasProperty('usingEclipse')
}

// #2nd approach - alternatively throw an StopExecutionException() like this
eclipse.doFirst {
    if(!usingEclipse) {
        throw new StopExecutionException()
    }
}
*/

/* --- --- --- */


/*

Quelle-Ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html 

Quelle: https://docs.gradle.org/current/userguide/tutorial_gradle_command_line.html

task compile {
    doLast {
        println 'compiling source'
    }
}

task compileTest(dependsOn: compile) {
    doLast {
        println 'compiling unit tests'
    }
}

task test(dependsOn: [compile, compileTest]) {
    doLast {
        println 'running unit tests'
    }
}

task dist(dependsOn: [compile, test]) {
    doLast {
        println 'building the distribution'
    }
}


-->


> gradle dist test -x EXCLUDE_TASK_e.g__test
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL in 0s
4 actionable tasks: 4 executed

*/
