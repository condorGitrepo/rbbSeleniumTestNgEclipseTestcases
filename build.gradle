
apply plugin: 'java'
apply plugin: 'eclipse'

version = '1.0'


jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}


/* Additional JARs */
repositories {
    mavenCentral()
}
/* ??? uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}*/


dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.testng:testng:' + '6.+'

	/* local project jars in own libs folder */
	//compoile fileTree(dir: 'libs', include: '*.jar')
	
	/* Reference from filesystem */
	//compile fileTree(dir: "${System.properties['user.home']}/libs/cargo", include: '*.jar')
}


/* Global testconfiguration */
test {
    /* Set system property for JVM(s) */
    systemProperties 'property': 'value'
    
    /* enable testng support (default is junit) */
	useTestNG() {
		suiteXmlFiles << new File("src/test/resources/testng.xml")
		// !!! testng.xml added by myself
	}

	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"

	// set JVM arguments for the test JVM(s)
	jvmArgs '-XX:MaxPermSize=256m'
}



/* --- Project description --- */
description="""
Description section
Project name: ${project.name}
"""
/* --- --- --- */



/* --- Tasks --- */

/* Downlload gradlew wrapper, if necessary */
task wrapper(type: Wrapper) {
	gradleVersion = '4.2.1'
}

/* Verify all jar dependencies */
task listJars {
	configurations.compile.each {
		File file -> println file.name
	}
}

task printSomething {
	description '#'
	doLast {
		println "The project name :: ${project.name}"
	}
}

/* --- --- --- */


/*

Quelle-Ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html 

Quelle: https://docs.gradle.org/current/userguide/tutorial_gradle_command_line.html

task compile {
    doLast {
        println 'compiling source'
    }
}

task compileTest(dependsOn: compile) {
    doLast {
        println 'compiling unit tests'
    }
}

task test(dependsOn: [compile, compileTest]) {
    doLast {
        println 'running unit tests'
    }
}

task dist(dependsOn: [compile, test]) {
    doLast {
        println 'building the distribution'
    }
}


-->


> gradle dist test -x EXCLUDE_TASK_e.g__test
:compile
compiling source
:compileTest
compiling unit tests
:test
running unit tests
:dist
building the distribution

BUILD SUCCESSFUL in 0s
4 actionable tasks: 4 executed

*/
