
apply plugin: 'java'
apply plugin: 'eclipse'

// Jar-File version
version = '1.0-DEV'

// Quell: https://docs.gradle.org/current/userguide/java_plugin.html
// archivesBaseName = DEFAULT_IS_PROJECTNAME



jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}



/* Additional JARs */
repositories {
    mavenCentral()
}



dependencies {
	// # gradle -q init --type groovy-library
	
	//compile 'org.webjars:npm:5.0.0-1'  	
	//compile 'org.webjars.npm:phantomjs-polyfill:0.0.2' 
	compile group: 'net.sourceforge.htmlunit', name: 'htmlunit', version: '2.29'
	
	/* Need to build the application */ 
    compile group: 'commons-collections', name: 'commons-collections', version: '3.+'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.+'
       
    /* Need to test application */
    testCompile group: 'junit', name: 'junit', version: '4.+'
    //testCompile 'org.testng:testng:' + '6.+'
    testCompile 'org.testng:testng:' + '6.+'
    testCompile group: 'net.sourceforge.htmlunit', name: 'webdriver', version: '2.+'
    

    //compile project(':rbbSeleniumTestNgEclipseTestcases')


	/* local project jars in own libs folder */
	//compile fileTree(dir: 'libs', include: '*.jar')
	
	
	//phantomjs 'ariya:phantomjs:1.9.8:macosx@zip' //Should correspond to: https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.8-macosx.zip
	
	
	/* Reference from filesystem */
	//compile fileTree(dir: "${System.properties['user.home']}/libs/cargo", include: '*.jar')
}



/* --- Test env --- */
// TestSuite = running a set of testcases
def conversario = project.hasProperty("TestNG")
// ./gradlew test -PsuiteX
// ./gradlew test -Psuite1 -Psuite2

/* Global testconfiguration */
test {
    /* Set system property for JVM(s) */
    systemProperties 'property': 'value'
	systemProperties 'tests.browser': 'firefox'
	
   	// show standard out and standard error of the test JVM(s) on the console
	testLogging.showStandardStreams = true

	// set heap size for the test JVM(s)
	minHeapSize = "128m"
	maxHeapSize = "512m"
	
	
    /* enable testng support (default is junit) */
	useTestNG() {
		// loading .xml test configuration into suiteXMLfiles
		//suiteXmlFiles << new File("src/test/resources/testng.yaml")
		//setSuiteXmlFiles(suiteXmlFiles)  
		
		if(conversario) {
			suites "src/test/resources/testng.yaml"
		}
	}
	testLogging.exceptionFormat = "full"
}
/* --- --- --- */



/* --- Project description --- */
description="""
Description section
Project name: ${project.name}
"""
/* --- --- --- */



/* --- Tasks --- */
// bash: #printenv
def bashHomePath = "$System.env.HOME"
// AL: def bashHomePath = System.properties['user.home']

task printSomething {
	// List taks by # gradle -q tasks --all under group-name
 	group 'MGE' 
	description '#'
	doFirst {
		println "The project name :: ${project.name} ${bashHomePath}"
	}
	doLast {
		println "CREATOR...so last"
	}
}


task NGclean(type: Delete) {
 	group 'MGE' 
	description '# Deletes specific classes and other files'
	delete 'bin/org/gradle/Listenklasse.class'
	delete 'bin/org/gradle/rbbTest.class'
	delete 'bin/org/gradle/base.class'
	delete 'bin/org/gradle/conversario.class'
	delete 'bin/org/gradle/resource.xml'
	delete 'test-output'
}
task NGsyncToCleanBin(type: Sync, dependsOn: 'NGclean') {
 	group 'MGE' 
	description '# Syncs necessary *.classes to /bin directory'
	// AL: run.dependsOn build, ...
    from 'build/classes/java/test/org/gradle'
    	include "**/*.class"
    into 'bin/org/gradle'
    
    from 'build/classes/java/main/org/gradle'
    	include "**/*.class"
    into 'bin/org/gradle'
}
task NGprepare(dependsOn: ['compileTestJava','NGsyncToCleanBin']) {
	group 'MGE'
	description '# Prepare directories for TestNG Testing'
	NGsyncToCleanBin.mustRunAfter compileTestJava
}


task TEST_AGAIN(dependsOn: ['clean','build']) {
	group 'MGE'
	description '# Test again without clean and build seperately'
	build.mustRunAfter clean
}


task A_PREPARE_Unit_NG(dependsOn: ['testClasses','NGprepare']) {
	group 'MGE'
	description '# Prepare for Unit- & NG-Testing'
	NGprepare.mustRunAfter testClasses
}


task A_CLEAN_clean_NGclean(dependsOn: ['clean','NGclean']) {
	group 'MGE'
	description '# clean & NGclean'
	NGclean.mustRunAfter clean
}


task wrapper(type: Wrapper) {
	group 'MGE'
	description '# Download gradlew wrapper, if necessary'
	gradleVersion = '4.2.1'
}


task listJars {
	group 'MGE'
	description '# Verify all jar dependencies'
	configurations.compile.each {
		File file -> println file.name
	}
}
/* --- --- --- */


/*

Quelle-Ref: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html 

Quelle: https://docs.gradle.org/current/userguide/tutorial_gradle_command_line.html

*/
